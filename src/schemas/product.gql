type Product implements Node {
  id: Binary!
  name: String!
  description: String!
  owner: Account!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductConnection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: Binary
}

type ProductEdge {
  cursor: Binary!
  node: Product!
}

input CreateProductInput {
  name: String!
  description: String!
}

input UpdateProductInput {
  id: Binary!
  body: UpdateProductBody!
}

input UpdateProductBody {
  name: String
  description: String
}

input DeleteProductInput {
  id: Binary!
}

input ProductsFilter {
  id: BinaryQueryOperatorInput
  name: StringQueryOperatorInput
}

input ProductSortInput {
  name: Int
}

type Mutation {
  """
  Create a product.
  """
  createProduct(input: CreateProductInput!): Product! @private

  """
  Update a product. User can only update own product.

  ## Error Codes
  	* `BAD_USER_INPUT` - Product not found.
  	* `BAD_USER_INPUT` - Cannot update product.
  """
  updateProduct(input: UpdateProductInput!): Product! @private

  """
  Delete a product. User can only delete own product.

  ## Error Codes
  		* `BAD_USER_INPUT` - Product not found.
  		* `BAD_USER_INPUT` - Cannot delete product.
  """
  deleteProduct(input: DeleteProductInput!): Boolean! @private
}

type Query {
  """
  Returns cursor-based list of products.
  Forward pagination only.
   Sorted by name.
  """
  products(
    first: Int = 10
    after: Binary
    filter: ProductsFilter
    sort: ProductSortInput
  ): ProductConnection!
}
